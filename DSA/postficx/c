#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX 100

int stack[MAX];
int top = -1;

// Push an element onto the stack
void push(int value) {
    if (top == MAX - 1) {
        printf("Stack Overflow\n");
        exit(1);
    }
    stack[++top] = value;
}

// Pop an element from the stack
int pop() {
    if (top == -1) {
        printf("Stack Underflow\n");
        exit(1);
    }
    return stack[top--];
}

// Evaluate the postfix expression
int evaluatePostfix(char* expr) {
    int i;
    char ch;
    int val, op1, op2;

    for (i = 0; expr[i] != '\0'; i++) {
        ch = expr[i];

        // Skip whitespace
        if (ch == ' ') continue;

        // If operand (single-digit)
        if (isdigit(ch)) {
            push(ch - '0');  // Convert char to int
        }
        // If operator
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            op2 = pop();
            op1 = pop();

            switch (ch) {
                case '+': val = op1 + op2; break;
                case '-': val = op1 - op2; break;
                case '*': val = op1 * op2; break;
                case '/':
                    if (op2 == 0) {
                        printf("Division by zero error\n");
                        exit(1);
                    }
                    val = op1 / op2;
                    break;
            }

            push(val);
        }
        else {
            printf("Invalid character: %c\n", ch);
            exit(1);
        }
    }

    return pop();
}

// Main function
int main() {
    char postfix[MAX];

    printf("Enter a valid postfix expression : ");
    fgets(postfix, MAX, stdin);
    postfix[strcspn(postfix, "\n")] = 0;
    int result = evaluatePostfix(postfix);
    printf("Result = %d\n", result);

    return 0;
}